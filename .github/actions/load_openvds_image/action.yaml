name: Load openvds image
description: Assures openvds docker image is loaded under OPENVDS_IMAGE_TAG environment variable. Image is either built anew or loaded from cache.

runs:
  using: "composite"
  steps:
    - name: Set parameters
      shell: bash
      id: parameters-setter
      run: |
        tag=utils
        DOCKER_BUILDKIT=1 docker build \
          -f Dockerfile \
          --target utils \
          -t $tag \
          .

        docker create --name $tag $tag
        docker cp $tag:/openvds_version.txt openvds_version.txt
        openvds_version=$(cat openvds_version.txt)
        echo "OPENVDS_VERSION=$openvds_version" >> $GITHUB_ENV
        echo "OPENVDS_CACHE_DIR=~/openvds_image" >> $GITHUB_ENV
        echo "OPENVDS_CACHE_FILE=openvds.tar" >> $GITHUB_ENV
        echo "OPENVDS_IMAGE_TAG=openvds:$openvds_version" >> $GITHUB_ENV

    - name: Make openvds directory
      shell: bash
      run: mkdir -p ${{ env.OPENVDS_CACHE_DIR }}

    - name: Check for openvds cache
      uses: actions/cache@v3
      id: openvds-cache
      with:
        path: ${{ env.OPENVDS_CACHE_DIR }}
        key: openvds-cache-${{ env.OPENVDS_VERSION }}

    - if: steps.openvds-cache.outputs.cache-hit != 'true'
      name: Build openvds image
      shell: bash
      run: |
        echo "openvds version ${{ env.OPENVDS_VERSION }} not found in cache"
        echo "making openvds image with tag: ${{ env.OPENVDS_IMAGE_TAG }}"

        docker build -f Dockerfile --target openvds -t ${{ env.OPENVDS_IMAGE_TAG }} .
        docker save -o ${{ env.OPENVDS_CACHE_DIR }}/${{ env.OPENVDS_CACHE_FILE }} ${{ env.OPENVDS_IMAGE_TAG }}

    - if: steps.openvds-cache.outputs.cache-hit == 'true'
      name: Load openvds image
      shell: bash
      run: |
        docker load -i ${{ env.OPENVDS_CACHE_DIR }}/${{ env.OPENVDS_CACHE_FILE }}
